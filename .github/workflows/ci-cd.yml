name: CI/CD for Task Management Dashboard

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Matches your Node.js LTS
          cache: 'npm' # Cache npm for speed
          cache-dependency-path: task-dashboard/package-lock.json

      - name: Install Angular dependencies
        run: npm ci
        working-directory: task-dashboard

      - name: Run unit tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        working-directory: task-dashboard

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: task-dashboard/coverage

  build-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend # Run after tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: task-dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: task-dashboard

      - name: Build Angular app
        run: npm run build -- --prod
        working-directory: task-dashboard

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: task-dashboard/dist/task-dashboard

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: npm ci
        working-directory: backend

      - name: Run backend tests (if any)
        run: npm test || echo "No backend tests defined"
        working-directory: backend

  dockerize:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Angular Docker image
        run: |
          docker build -t task-dashboard-frontend:latest -f task-dashboard/Dockerfile task-dashboard
        working-directory: .

      - name: Build Backend Docker image
        run: |
          docker build -t task-dashboard-backend:latest -f backend/Dockerfile backend
        working-directory: .

      - name: Save Docker images
        run: |
          docker save -o frontend-image.tar task-dashboard-frontend:latest
          docker save -o backend-image.tar task-dashboard-backend:latest

      - name: Upload Docker images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            frontend-image.tar
            backend-image.tar

  # Optional: Deploy (uncomment and configure for your provider)
  # deploy-frontend:
  #   runs-on: ubuntu-latest
  #   needs: build-frontend
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: angular-build
  #         path: dist
  #     - name: Deploy to Netlify
  #       uses: nwtgck/actions-netlify@v3
  #       with:
  #         publish-dir: './dist/task-dashboard'
  #         production-branch: main
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         netlify-auth-token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         netlify-site-id: ${{ secrets.NETLIFY_SITE_ID }}

  # deploy-backend:
  #   runs-on: ubuntu-latest
  #   needs: build-backend
  #   steps:
  #     - name: Deploy to Render
  #       run: curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
  #         -H "Content-Type: application/json" \
  #         -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}"}' \
  #         https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys